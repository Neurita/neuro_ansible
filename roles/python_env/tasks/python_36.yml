---

- name: Set variables
  set_fact:
    lib_name: python-3.6
    lib_version: 3.6
    tarball_url: "https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tar.xz"
    tarball_hash: "md5:1325134dd525b4a2c3272a1a0214dd54."

- name: '{{ lib_name }} | Set variables'
  set_fact:
    tarball_filename: '{{ tarball_url | basename }}'
    filename_no_extension: '{{ tarball_url | basename | splitext | first | splitext | first }}'
    sys_python: "{{ user_local_dir }}/bin/python{{ lib_version }}"

- name: '{{ lib_name }} | Set variables'
  set_fact:
    download_dir: "{{ soft_dir }}/{{ lib_name }}"
    tarball_path: "{{ soft_dir }}/{{ lib_name }}/{{ tarball_filename }}"
    unarchive_dir: "{{ soft_dir }}/{{ lib_name }}/{{ filename_no_extension }}"
    check_if_exists: "{{ user_local_dir }}/lib/python{{ lib_version }}"

- name: '{{ lib_name }} | Install build dependencies'
  apt:
    pkg: "{{ item }}"
    state: build-dep
  with_items:
    - python3
    - python3-tk
  become: yes
  become_method: sudo

- name: '{{ lib_name }} | Install TCL/TK dependencies'
  apt:
    pkg: "{{ item }}"
    state: present
  with_items:
    - libtcl8.6
    - libtk8.6
    - tcl
    - tcl-dev
    - tcl8.6
    - tcl8.6-dev
    - tk
    - tk-dev
    - tk8.6
    - tk8.6-blt2.5
    - tk8.6-dev
  become: yes
  become_method: sudo

- name: '{{ lib_name }} | Install other build dependencies'
  apt:
    pkg: "{{ item }}"
    state: present
  with_items:
    - zlib1g-dev
    - libreadline-dev
    - libsqlite3-dev
    - libsqlite3-dev
    - libssl-dev
    - libsqlite3-dev
    - libbz2-dev
    - liblzma-dev
    - libgdbm-dev
    - libncurses5-dev
  become: yes
  become_method: sudo

- name: '{{ lib_name }} | Create download directories'
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ download_dir }}"

- name: '{{ lib_name }} | Download'
  get_url:
    url: "{{ tarball_url }}"
    dest: "{{ download_dir }}"
    checksum: "{{ tarball_hash }}"

- name: '{{ lib_name }} | Unpack'
  command: >
    tar xvf {{ tarball_path }}
  args:
    chdir: "{{ download_dir }}"
  creates: "{{ unarchive_dir }}/Makefile"

- name: '{{ lib_name }} | Check if is in the system'
  stat:
    path: "{{ check_if_exists }}"
  register: lib_exists

- name: '{{ lib_name }} | Configure'
  command: >
    ./configure --prefix={{ user_local_dir }} --enable-optimizations
  args:
    chdir: "{{ unarchive_dir }}"
  when: lib_exists.stat.exists == False

- name: '{{ lib_name }} | Build'
  command: "make -j {{ n_cpus }}"
  args:
    chdir: "{{ unarchive_dir }}"
  when: lib_exists.stat.exists == False

- name: '{{ lib_name }} | Install'
  command: "make install"
  args:
    chdir: "{{ unarchive_dir }}"
  become: yes
  become_method: sudo
  when: lib_exists.stat.exists == False

- name: '{{ lib_name }} | Remove {{ unarchive_dir }} directory'
  file:
    path: "{{ unarchive_dir }}/"
    state: absent
  become: yes
  become_method: sudo
  tags: cleanup
